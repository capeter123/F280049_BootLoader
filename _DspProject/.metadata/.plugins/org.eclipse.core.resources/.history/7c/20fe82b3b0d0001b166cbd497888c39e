/*
 * bootrom.h
 *
 *  Created on: 2021. 6. 19.
 *      Author: sniper79
 */

#ifndef BOOTROM_H_
#define BOOTROM_H_

#include <stdint.h>
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "inc/hw_sysctl.h"
#include "inc/hw_sci.h"
#include "inc/hw_i2c.h"
#include "sysctl.h"
#include "cpu.h"
#include "interrupt.h"
#include "flash.h"
#include "dcsm.h"
#include "pin_map.h"
#include "gpio.h"
#include "sci.h"
#include "spi.h"
#include "i2c.h"
#include "can.h"

// when the rom is run with an emulator connected,
// these for addresses are used to emulate OTP configuration.
#define EMU_BOOTPIN_CONFIG  0xD00   // equivalent to GPREG1
#define EMU_BOOT_GPREG2     0xD02   // equivalent to GPREG2
#define EMU_BOOTDEF_LOW     0xD04   // equivalent to GPREG3
#define EMU_BOOTDEF_HIGH    0xD06   // equivalnet to BOOTCTRL

// emulation boot pin configuration fields.
// Currently, only EMU_BOOTPIN_CONFIG_KEY is used.
#define EMU_BOOTPIN_CONFIG_KRY      ((HWREG(EMU_BOOTPIN_CONFIG) & (uint32_t)0xFF000000) >> 24)
//#define EMU_BOOTPIN_CONFIG_BMSP2  ((HWREG(EMU_BOOTPIN_CONFIG) & (uint32_t)0x00FF0000) >> 16)
//#define EMU_BOOTPIN_CONFIG_BMSP1  ((HWREG(EMU_BOOTPIN_CONFIG) & (uint32_t)0x0000FF00) >> 8)
//#define EMU_BOOTPIN_CONFIG_BMSP0  ((HWREG(EMU_BOOTPIN_CONFIG) & (uint32_t)0x000000FF))

#define EMUBOOTDEF_L(x)             ((HWREG(EMU_BOOTDEF_LOW)  & ((uint32_t)0xFF << (8*x))) >> (8*x))
#define EMUBOOTDEF_H(x)             ((HWREG(EMU_BOOTDEF_HIGH) & ((uint32_t)0xFF << (8*x))) >> (8*x))

#define Z1_OTP_BOOTPIN_CONFIG       (DCSMBANK0_Z1_BASE + DCSM_O_B0_Z1_GPREG1)
#define Z1_OTP_BOOT_GPREG2          (DCSMBANK0_Z1_BASE + DCSM_O_B0_Z1_GPREG2)
#define Z1_OTP_BOOTDEF_LOW          (DCSMBANK0_Z1_BASE + DCSM_O_B0_Z1_GPREG3)
#define Z1_OTP_BOOTDEF_HIGH         (DCSMBANK0_Z1_BASE + DCSM_O_B0_Z1_BOOTCTRL)

/*
Z1-GPREG2[31:24] => VALIDITY_KEY (=0x5A);
Z1-GPREG2[23:8] => RESERVED; no usage defined yet.
Z1-GPREG2[7:6] => 00 -> RUN PBIST (includes checksum test on 128KB unsecure ROM)
                  01 � Reserved (will not run PBIST)
                  10 - Reserved (will not run PBIST)
                  11 � Reserved (will not run PBIST)
Z1-GPREG2[5:4] => ERROR_STS_PIN config; this tells which GPIO pin is supposed to be used as ERROR_PIN and boot ROM configures the mux as such for the said pin.
                0 � GPIO24, MUX Option 13
                1 � GPIO28, MUX Option 13
                2 � GPIO29, MUX Option 13
                3 � ERROR_STS function Disable  (default)

Z1-GPREG2[3:0]  =>  CJTAGNODEID[3:0];
                boot ROM takes this values and programs the lower 4 bits of the CJTAGNODEID register.
*/

#define Z1_OTP_BOOT_GPREG2_KEY            ((HWREG(Z1_OTP_BOOT_GPREG2) & (uint32_t)0xFF000000) >> 24)
#define Z1_OTP_BOOT_GPREG2_PBIST_CONFIG   ((HWREG(Z1_OTP_BOOT_GPREG2) & (uint32_t)0x000000C0) >> 6)
#define Z1_OTP_BOOT_GPREG2_ERRSTS_CONFIG  ((HWREG(Z1_OTP_BOOT_GPREG2) & (uint32_t)0x00000030) >> 4)
#define Z1_OTP_BOOT_GPREG2_CJTAGNODEID    ((HWREG(Z1_OTP_BOOT_GPREG2) & (uint32_t)0x0000000F))

#define Z1_OTP_BOOTPIN_CONFIG_KEY       ((HWREG(Z1_OTP_BOOTPIN_CONFIG) & (uint32_t)0xFF000000) >> 24)
//#define Z1_OTP_BOOTPIN_CONFIG_BMSP0   ((HWREG(Z1_OTP_BOOTPIN_CONFIG) & (uint32_t)0x000000FF))
//#define Z1_OTP_BOOTPIN_CONFIG_BMSP1   ((HWREG(Z1_OTP_BOOTPIN_CONFIG) & (uint32_t)0x0000FF00) >> 8)
//#define Z1_OTP_BOOTPIN_CONFIG_BMSP2   ((HWREG(Z1_OTP_BOOTPIN_CONFIG) & (uint32_t)0x00FF0000) >> 16)

#define Z1_OTP_BOOTDEF_L(x)             ((HWREG(Z1_OTP_BOOTDEF_LOW)  & ((uint32_t)0xFF << (8*x))) >> (8*x))
#define Z1_OTP_BOOTDEF_H(x)             ((HWREG(Z1_OTP_BOOTDEF_HIGH) & ((uint32_t)0xFF << (8*x))) >> (8*x))

//#define EMU_BOOTDEF0              ((HWREG(EMU_BOOTDEF_LOW) & 0xFF) & 0x1F)
//#define EMU_BOOTDEF0_ALT_OPTIONS  (((HWREG(EMU_BOOTDEF_LOW) & 0xFF) & 0xE0) >> 5)
//
//#define EMU_BOOTDEF1              (((HWREG(EMU_BOOTDEF_LOW) & 0xFF00)>>8) & 0x1F)
//#define EMU_BOOTDEF1_ALT_OPTIONS  ((((HWREG(EMU_BOOTDEF_LOW) & 0xFF00)>>8) & 0xE0) >> 5)
//
//#define EMU_BOOTDEF2              (((HWREG(EMU_BOOTDEF_LOW) & (uint32_t)0xFF0000) >> 16) & 0x1F)
//#define EMU_BOOTDEF2_ALT_OPTIONS  ((((HWREG(EMU_BOOTDEF_LOW) & (uint32_t)0xFF0000) >> 16) & 0xE0) >> 5)
//
//#define EMU_BOOTDEF3              (((HWREG(EMU_BOOTDEF_LOW) & (uint32_t)0xFF000000) >> 24) & 0x1F)
//#define EMU_BOOTDEF3_ALT_OPTIONS  ((((HWREG(EMU_BOOTDEF_LOW) & (uint32_t)0xFF000000) >> 24) & 0xE0) >> 5)
//
//#define EMU_BOOTDEF4              ((HWREG(EMU_BOOTDEF_HIGH) & 0xFF) & 0x1F)
//#define EMU_BOOTDEF4_ALT_OPTIONS  (((HWREG(EMU_BOOTDEF_HIGH) & 0xFF) & 0xE0) >> 5)
//
//#define EMU_BOOTDEF5              (((HWREG(EMU_BOOTDEF_HIGH) & 0xFF00)>>8) & 0x1F)
//#define EMU_BOOTDEF5_ALT_OPTIONS  ((((HWREG(EMU_BOOTDEF_HIGH) & 0xFF00)>>8) & 0xE0) >> 5)
//
//#define EMU_BOOTDEF6              (((HWREG(EMU_BOOTDEF_HIGH) & (uint32_t)0xFF0000) >> 16) & 0x1F)
//#define EMU_BOOTDEF6_ALT_OPTIONS  ((((HWREG(EMU_BOOTDEF_HIGH) & (uint32_t)0xFF0000) >> 16) & 0xE0) >> 5)
//
//#define EMU_BOOTDEF7              (((HWREG(EMU_BOOTDEF_HIGH) & (uint32_t)0xFF000000) >> 24) & 0x1F)
//#define EMU_BOOTDEF7_ALT_OPTIONS  ((((HWREG(EMU_BOOTDEF_HIGH) & (uint32_t)0xFF000000) >> 24) & 0xE0) >> 5)

#define FACTORY_DEFAULT_BMSP0       32      //GPIO32
#define FACTORY_DEFAULT_BMSP1       24      //GPIO24

#define PARALLEL_BOOT           0x00

#define SCI_BOOT                0x01    //GPIO28; //GPIO29 (CCARD)
#define SCI_BOOT_ALT1           0x21    //GPIO16; //GPIO17
#define SCI_BOOT_ALT2           0x41    //GPIO8; GPIO9
//#define SCI_BOOT_ALT3           0x61    //GPIO48, GPIO49
#define SCI_BOOT_ALT4           0x81    //GPIO24, GPIO25
//#define SCI_BOOT_ALT4         0x81
//#define SCI_BOOT_ALT5         0xA1
//#define SCI_BOOT_ALT6         0xC1
//#define SCI_BOOT_ALT7         0xE1

#define CAN_BOOT                0x02    //GPIO32; GPIO33
#define CAN_BOOT_ALT1           0x22    //GPIO4; GPIO5
#define CAN_BOOT_ALT2           0x42    //GPIO30; GPIO31
#define CAN_BOOT_ALT3           0x62    //GPIO35; GPIO37
#define CAN_BOOT_SENDTEST       0x82    //GPIO32; GPIO33
#define CAN_BOOT_ALT1_SENDTEST  0xA2    //GPIO4; GPIO5
#define CAN_BOOT_ALT2_SENDTEST  0xC2    //GPIO30; GPIO31
#define CAN_BOOT_ALT3_SENDTEST  0xE2    //GPIO35; GPIO37

#define FLASH_BOOT              0x03    //begin of BANK 0 Sector 0
#define FLASH_BOOT_ALT1         0x23    //begin of BANK 0 Sector 15
#define FLASH_BOOT_ALT2         0x43    //begin of BANK 1 Sector 0
#define FLASH_BOOT_ALT3         0x63    //begin of BANK 1 Sector 15

#define WAIT_BOOT               0x04    //with WDOG enabled
#define WAIT_BOOT_ALT1          0x24    //without WDOG enabled

#define RAM_BOOT                0x05
//#define RAM_BOOT_ALT1         0x25
//#define RAM_BOOT_ALT2         0x45
//#define RAM_BOOT_ALT3         0x65


#define SPI_MASTER_BOOT         0x06    //GPIO16-GPIO19
#define SPI_MASTER_BOOT_ALT1    0x26    //GPIO8-GPIO11
#define SPI_MASTER_BOOT_ALT2    0x46    //GPIO54-GPIO57
#define SPI_MASTER_BOOT_ALT3    0x66    //GPIO16, GPIO17, GPIO56, GPIO57
#define SPI_MASTER_BOOT_ALT4    0x86    //GPIO8, GPIO17, GPIO9, GPIO11


#define I2C_MASTER_BOOT         0x07    //GPIO32, GPIO33
#define I2C_MASTER_BOOT_ALT1    0x27    //GPIO18; GPIO19
#define I2C_MASTER_BOOT_ALT2    0x47    //GPIO26; GPIO27
#define I2C_MASTER_BOOT_ALT3    0x67    //GPIO42; GPIO43

#define PLC_BOOT                0x08

#define BROM_ASYSCTL_O_PMMREFTRIM   0x12U       //Power Management Module Reference Trim Register
#define BROM_ASYSCTL_O_PMMVREGTRIM  0x14U       //Power Management Module VREG Trim Register
#define BROM_ASYSCTL_O_PMMVMONTRIM  0x0EU       //Power Management Module VMON Trim Register
#define BROM_ASYSCTL_O_PMMVMONTRIM2 0x10U       //Power Management Module VMON Trim Register

#define BROM_ASYSCTL_O_OSCREFTRIM   0x06U       // OSC IREF,BGSLOPE,BGVAL TRIM
#define BROM_ASYSCTL_O_OSC1_TRIM    0x00U       // INTOSC1 SLOPE, VALFINE TRIMs
#define BROM_ASYSCTL_O_OSC2_TRIM    0x02U       // INTOSC2 SLOPE, VALFINE TRIMs


















#endif /* BOOTROM_H_ */
